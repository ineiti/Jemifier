import { ListSongs, Song } from "./song";

describe('Searching', () => {
    it('should return one result', () => {
        let list = song_list.search_matches("alleluia dan luiten", 0, 2).sort((a, b) => a.score - b.score);
        expect(list[0].song.number).toBe(291);
        expect(list[1].song.number).toBe(969);
        list = song_list.search_matches("alleluia steven fry", 0, 2).sort((a, b) => a.score - b.score);
        expect(list[0].song.number).toBe(969);
        expect(list[1].song.number).toBe(291);
    })
})

const song_0 = new Song(0, { "song_id": 989, "book_id": 0, "number": 969, "author": "Dan Luiten", "author_search": { "lower_ascii": "dan luiten", "parts": ["dan", "luiten"] }, "title": "Toi seul est digne", "title_search": { "lower_ascii": "toi seul est digne", "parts": ["toi", "seul", "est", "digne"] }, "lyrics": "[V1]\r\n L'immensité de ta grandeur\r\n Me montre que je ne suis rien.\r\n Mais quand tu façonnais la terre,\r\n J'étais déjà près de ton cœur.|\r\n \r\n[V2] \r\n Tu m'aimais avant que je sois\r\n Et pour moi tu as tout donné,\r\n Toi seul pouvais me libérer,\r\n C'est pourquoi je veux t'adorer.|\r\n \r\n[Ref]\r\n Toi seul est digne de recevoir\r\n Louange et gloire pour l'éternité!\r\n Toi seul est digne de recevoir\r\n Louange et gloire pour l'éternité!\r\n \r\n[V3]\r\n Dans ta présence je me tiens,\r\n Car tu as ce dont j'ai besoin.\r\n La joie, la vie et le bonheur\r\n Sont dans tes parvis, mon Sauveur.|\r\n \r\n[Bridge]\r\n Alléluia, alléluia, \r\n alléluia, alléluia.\r\n Alléluia, alléluia, \r\n alléluia, alléluia.|", "lyrics_search": { "lower_ascii": "[v1]\r\n l'immensite de ta grandeur\r\n me montre que je ne suis rien.\r\n mais quand tu faconnais la terre,\r\n j'etais deja pres de ton cœur.|\r\n \r\n[v2] \r\n tu m'aimais avant que je sois\r\n et pour moi tu as tout donne,\r\n toi seul pouvais me liberer,\r\n c'est pourquoi je veux t'adorer.|\r\n \r\n[ref]\r\n toi seul est digne de recevoir\r\n louange et gloire pour l'eternite!\r\n toi seul est digne de recevoir\r\n louange et gloire pour l'eternite!\r\n \r\n[v3]\r\n dans ta presence je me tiens,\r\n car tu as ce dont j'ai besoin.\r\n la joie, la vie et le bonheur\r\n sont dans tes parvis, mon sauveur.|\r\n \r\n[bridge]\r\n alleluia, alleluia, \r\n alleluia, alleluia.\r\n alleluia, alleluia, \r\n alleluia, alleluia.|", "parts": ["[v1]\r\n", "l", "immensite", "de", "ta", "grandeur\r\n", "me", "montre", "que", "je", "ne", "suis", "rien", "\r\n", "mais", "quand", "tu", "faconnais", "la", "terre", "\r\n", "j", "etais", "deja", "pres", "de", "ton", "cœur", "|\r\n", "\r\n[v2]", "\r\n", "tu", "m", "aimais", "avant", "que", "je", "sois\r\n", "et", "pour", "moi", "tu", "as", "tout", "donne", "\r\n", "toi", "seul", "pouvais", "me", "liberer", "\r\n", "c", "est", "pourquoi", "je", "veux", "t", "adorer", "|\r\n", "\r\n[ref]\r\n", "toi", "seul", "est", "digne", "de", "recevoir\r\n", "louange", "et", "gloire", "pour", "l", "eternite!\r\n", "toi", "seul", "est", "digne", "de", "recevoir\r\n", "louange", "et", "gloire", "pour", "l", "eternite!\r\n", "\r\n[v3]\r\n", "dans", "ta", "presence", "je", "me", "tiens", "\r\n", "car", "tu", "as", "ce", "dont", "j", "ai", "besoin", "\r\n", "la", "joie", "la", "vie", "et", "le", "bonheur\r\n", "sont", "dans", "tes", "parvis", "mon", "sauveur", "|\r\n", "\r\n[bridge]\r\n", "alleluia", "alleluia", "\r\n", "alleluia", "alleluia", "\r\n", "alleluia", "alleluia", "\r\n", "alleluia", "alleluia", "|"] }, "keywords": [], "keywords_search": [] });
const song_1 = new Song(1, { "song_id": 300, "book_id": 0, "number": 291, "author": "Steven Fry", "author_search": { "lower_ascii": "steven fry", "parts": ["steven", "fry"] }, "title": "Alléluia", "title_search": { "lower_ascii": "alleluia", "parts": ["alleluia"] }, "lyrics": "[V1]\r\n Alléluia, alléluia,\r\n Alléluia, alléluia,\r\n Alléluia, alléluia,\r\n Alléluia, alléluia, alléluia.", "lyrics_search": { "lower_ascii": "[v1]\r\n alleluia, alleluia,\r\n alleluia, alleluia,\r\n alleluia, alleluia,\r\n alleluia, alleluia, alleluia.", "parts": ["[v1]\r\n", "alleluia", "alleluia", "\r\n", "alleluia", "alleluia", "\r\n", "alleluia", "alleluia", "\r\n", "alleluia", "alleluia", "alleluia"] }, "keywords": [], "keywords_search": [] });
const song_list = new ListSongs(JSON.stringify([song_0, song_1]));